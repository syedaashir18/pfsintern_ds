# -*- coding: utf-8 -*-
"""CUSTOMER_SEGMENTATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SZ8Dklf9HRNNm-5kE2Q1pbMwUUgjmtvZ

Importing libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""Importing dataset

"""

data=pd.read_csv("Customer_segmentation.csv")

"""Data Exploration"""

data.head()

data.info()

data.drop("Customer ID", axis=1, inplace=True)

data.shape

data.describe()

data.describe(include='object').T

data.select_dtypes(include='object').nunique()

data['Satisfaction Level'].unique()

satisfaction_counts = data['Satisfaction Level'].value_counts()
print(satisfaction_counts)

genderwise_counts = data['Gender'].value_counts()
print(genderwise_counts)

membership_counts = data['Membership Type'].value_counts()
print(membership_counts)

city_counts = data['City'].value_counts()
print(city_counts)

"""Data Cleaning"""

data.isnull().sum()

data.dropna(inplace = True)
data.info()

df=data.copy()

"""Exploratory Data Analysis (EDA)"""

def categorical_column(df,col_name):
    '''
    Plots a pie chart showing the distribution of categories in a specified column of a DataFrame.
    '''
    distribution = df[col_name].value_counts().reset_index()
    print(distribution)
    counts = df[col_name].value_counts()
    palette = sns.color_palette('Set3', len(counts))
    plt.figure(figsize=(4,4))
    plt.pie(counts, labels=counts.index, autopct='%1.1f%%', startangle=140, colors=palette, wedgeprops=dict(edgecolor='black', linewidth=0.8))
    plt.axis('equal')
    plt.title(col_name,fontsize=15)
    plt.show()

def numerical_column(df,col_name):
    '''
    Provides statistical summaries and a histogram for a specified numerical column in a DataFrame.
    '''
    print(f'{col_name} description:')
    print(f'The average value is: {round(df[col_name].mean(),2)}')
    print(f'The minumun value is: {round(df[col_name].min(),2)}')
    print(f'The median value is: {round(df[col_name].median(),2)}')
    print(f'The maximun value is: {round(df[col_name].max(),2)}')
    plt.figure(figsize=(4,4))
    sns.histplot(x=col_name, data=df, bins=18, color='salmon',kde=True)
    plt.show()

"""Gender"""

categorical_column(df, 'Gender')

"""City"""

categorical_column(df, 'City')

"""Membership Type"""

categorical_column(df, 'Membership Type')

"""Satisfaction Level"""

categorical_column(df, 'Satisfaction Level')

"""Discount Applied"""

categorical_column(df, 'Discount Applied')

"""Age"""

numerical_column(df,'Age')

"""Total Spend"""

numerical_column(df,'Total Spend')

expenses_bins_edge = [0,550,850,1250,np.inf]
expenses_labels = ['Expenses up to 550', 'Expenses between 550 and 850', 'Expenses between 850 and 1250', 'Expenses greater than 1250']
df['Expenses'] = pd.cut(df['Total Spend'], bins=expenses_bins_edge, labels=expenses_labels, right=True, include_lowest=True)

"""Item Purchased"""

numerical_column(df,'Items Purchased')

items_bins_edge = [0,10,15,20,np.inf]
items_labels = ['Less than 10 items', 'Between 10 and 15 items', 'Between 15 and 20 items', 'More than 20 items' ]
df['Items'] = pd.cut(df['Items Purchased'], bins=items_bins_edge, labels=items_labels, right=True, include_lowest=True)

"""Average Rating"""

numerical_column(df,'Average Rating')

rating_bins_edge = [3,3.5,4,4.5,5]
rating_labels = ['3.0 - 3.5', '3.5 - 4.0', '4.0 - 4.5', '4.5 - 5.0']
df['Rating'] = pd.cut(df['Average Rating'], bins=rating_bins_edge, labels=rating_labels, right=True, include_lowest=True)

"""Day Since Last Purchase"""

numerical_column(df,'Days Since Last Purchase')

purchase_bins_edge = [0,20,40,60, np.inf]
purchase_labels = ['Less than 20 days', 'Between 20 and 40 days', 'Between 40 and 60 days', 'More than 60 days']
df['Last Purchase'] = pd.cut(df['Days Since Last Purchase'], bins=purchase_bins_edge, labels=purchase_labels, right=True, include_lowest=True)

"""Customer Behavior Analysis by Gender"""

def gender_analysis(df,column_name):
    """
    Analyzes and visualizes the distribution of a specified column split by gender.
    """
    distribution = df[['Gender', column_name]].value_counts().reset_index().sort_values(by=column_name)
    print(distribution)
    plt.figure(figsize=(16,6))
    palette = {'Male': 'cornflowerblue', 'Female': 'lightcoral'}
    sns.barplot(data=distribution, x=column_name, y='count', hue='Gender', palette = palette,edgecolor='black')
    plt.title(f'{column_name} Distribution')
    plt.show()

"""Gender vs Age"""

gender_analysis(df, 'Age')

"""Gender vs City"""

gender_analysis(df, 'City')

"""Gender vs Membership Type"""

gender_analysis(df, 'Membership Type')

"""Gender vs Total Spend"""

gender_analysis(df,'Expenses')

total_spend_by_gender = df.groupby('Gender')['Total Spend'].sum()
print(total_spend_by_gender)

"""Gender vs Discount Applied"""

gender_analysis(df,'Discount Applied')

"""Gender vs Item Purchased"""

gender_analysis(df,'Items')

total_items_by_gender = df.groupby('Gender')['Items Purchased'].sum()
print(total_items_by_gender)
print(" ")
avg_price_item = round(total_spend_by_gender / total_items_by_gender, 2)
print(avg_price_item)

"""Gender vs Day Since Last Purchase"""

gender_analysis(df,'Last Purchase')

"""Gender vs Average Rating"""

gender_analysis(df,'Rating')

"""Gender vs Satisfaction Level"""

gender_analysis(df,'Satisfaction Level')

"""Customer behaviour analysis of total spend in different categories"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

def plot(numerical, categorical, axes):
    grouped = df.groupby(categorical)
    p_df = pd.DataFrame(grouped[numerical].sum())
    p_df = p_df.sort_values(numerical, ascending=False)
    sns.barplot(x=p_df.index, y=p_df[numerical], ax=axes, palette='Set2',edgecolor='black')
    for container in axes.containers:
        axes.bar_label(container, size=12)

    if len(p_df) >= 4:
        axes.set_xticklabels(axes.get_xticklabels(), rotation=45)

    axes.set_title("Sum of {} by {}".format(numerical, categorical))

fig, axes = plt.subplots(nrows=1, ncols=4, figsize=(17, 6))
index = 0
for i in ["City", "Gender", "Membership Type", "Satisfaction Level"]:
    plot("Total Spend", i, axes[index])
    index += 1
plt.tight_layout()
plt.show()

def total_spend_analysis(df,column_name):
    """
    Analyzes and visualizes the distribution of total spend.
    """
    plt.figure(figsize=(4,4))
    sns.scatterplot(x=column_name, y='Total Spend', data=df,alpha=0.5)
    plt.xlabel(column_name)
    plt.ylabel('Total Spend')
    plt.title(f'Total Spend vs {column_name}')
    plt.show()

total_spend_analysis(df,'Age')

total_spend_analysis(df,'Items Purchased')

total_spend_analysis(df,'Average Rating')

total_spend_analysis(df,'Days Since Last Purchase')

"""Average Spend in different Age groups"""

age_bins = [0, 20, 30, 40, 50, 60]

df['Age Group'] = pd.cut(df['Age'], bins=age_bins)

age_group_analysis = df.groupby('Age Group').agg(
    Average_Spend=('Total Spend', 'mean'),
    Average_Items=('Items Purchased', 'mean'),
    Average_Rating=('Average Rating', 'mean')
).reset_index()

# Visualizing the results
plt.figure(figsize=(12, 8))
palette = sns.color_palette('Set3')
sns.barplot(x='Age Group', y='Average_Spend', data=age_group_analysis,palette='Set3',edgecolor='black')
plt.title('Average Spend by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Average Spend')
plt.show()

# making a new column for age group
age_grp=['21-30','31-43']
df['age_group'] = pd.cut(df.Age,bins=np.arange(15,46,15),labels=age_grp,right=True)

# visualize the distribution of age groups
palette = sns.color_palette('Pastel2')
df['age_group'].value_counts().plot.pie(autopct='%.2f%%', colors=palette, wedgeprops=dict(edgecolor='black', linewidth=0.8))
plt.show()

# average spending by age group
sns.barplot(data=df, x='age_group', y='Total Spend',palette='Pastel1',edgecolor='black')
plt.ylabel('Average Spending')
plt.title('Average Spending by Age Group')
plt.show()

# average number of items purchased by age group
sns.barplot(data=df, x='age_group', y='Items Purchased',palette='Pastel2',edgecolor='black')
plt.title('Average NO. of Items Purchased by Age Group')
plt.show()

# average Rating by Age Group
sns.barplot(data=df, x='age_group', y='Average Rating',palette='Set3',edgecolor='black')
plt.show()

"""Correlation"""

# Encode categorical columns
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

df['Gender'] = label_encoder.fit_transform(df['Gender'])
df['City'] = label_encoder.fit_transform(df['City'])
df['Membership Type'] = label_encoder.fit_transform(df['Membership Type'])
df['Satisfaction Level'] = label_encoder.fit_transform(df['Satisfaction Level'])

# Encode boolean column
df['Discount Applied'] = df['Discount Applied'].astype(int)


corr_matrix = df[['Gender','Age','City','Membership Type', 'Total Spend', 'Items Purchased', 'Average Rating','Discount Applied', 'Days Since Last Purchase','Satisfaction Level']].corr()
corr_matrix

# Create the heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5, vmin=-1, vmax=1)
plt.title('Correlation Heatmap')
plt.show()

df.head()

data.head()

data.info()

"""K-means Clustering"""

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import warnings


# Suppress specific FutureWarnings
warnings.filterwarnings("ignore", category=FutureWarning)

features = ['Age', 'Total Spend', 'Items Purchased', 'Average Rating']
# Normalize the data
scaler = StandardScaler()
scaled_features = scaler.fit_transform(data[features])

inertia = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(scaled_features)
    inertia.append(kmeans.inertia_)

# Plotting the Elbow graph
sns.lineplot(x=range(1, 11),y=inertia, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()

k = 3
kmeans = KMeans(n_clusters=k, random_state=42)
clusters = kmeans.fit_predict(scaled_features)

# Add the cluster information to the original data
data['Cluster'] = clusters
data.head()

# Analyze the segments
for i in range(k):
    print(f"Cluster {i}:")
    cluster_data = data[data['Cluster'] == i]
    print(cluster_data[features].describe())

# Visualize the clusters based on two key features
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Total Spend', y='Age', hue='Cluster', data=data, palette='Set1')
plt.title('Clusters Based on Total Spend and Age')
plt.show()

