# -*- coding: utf-8 -*-
"""Heart_disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RwXv9BXd5sffjef0LwQT_xiMetmxm-eh
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

import os
print(os.listdir())

import warnings
warnings.filterwarnings('ignore')

"""Importing and understanding our dataset"""

dataset = pd.read_csv("heart_disease.csv")

"""Verifying it as a 'dataframe' object in pandas"""

type(dataset)

"""Shape of dataset"""

dataset.shape

"""Printing out a few columns"""

dataset.head(5)

dataset.sample(5)

"""Description"""

dataset.describe()

dataset.info()

"""Let's understand our columns better:"""

info = ["age","1: male, 0: female","chest pain type, 1: typical angina, 2: atypical angina, 3: non-anginal pain, 4: asymptomatic","resting blood pressure"," serum cholestoral in mg/dl","fasting blood sugar > 120 mg/dl","resting electrocardiographic results (values 0,1,2)"," maximum heart rate achieved","exercise induced angina","oldpeak = ST depression induced by exercise relative to rest","the slope of the peak exercise ST segment","number of major vessels (0-3) colored by flourosopy","thal: 3 = normal; 6 = fixed defect; 7 = reversable defect"]



for i in range(len(info)):
    print(dataset.columns[i]+":\t\t\t"+info[i])

"""Analysing the 'target' variable

"""

dataset["num"].describe()

dataset["num"].unique()

"""Clearly, this is a classification problem, with the target variable having values '0' and '1'

Checking correlation between columns
"""

print(dataset.corr(numeric_only=True)["num"].abs().sort_values(ascending=False)) #The numeric_only parameter is set to True to only include numerical columns when calculating the correlation.

#This shows that most columns are moderately correlated with target, but 'fbs' is very weakly correlated.

"""Exploratory Data Analysis (EDA)
First, analysing the target variable:
"""

y = dataset["num"]

sns.countplot(y)


num_temp = dataset.num.value_counts()

print(num_temp)

print("Percentage of patience without heart problems: "+str(round(num_temp[0]*100/303,2)))
print("Percentage of patience with heart problems: "+str(round(num_temp[1]*100/303,2)))

#Alternatively,
# print("Percentage of patience with heart problems: "+str(y.where(y==1).count()*100/303))
# print("Percentage of patience with heart problems: "+str(y.where(y==0).count()*100/303))

# #Or,
# countNoDisease = len(df[df.target == 0])
# countHaveDisease = len(df[df.target == 1])

"""We'll analyse 'sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca' and 'thal' features

Analysing the 'Sex' feature
"""

dataset["sex"].unique()

"""We notice, that as expected, the 'sex' feature has 2 unique features"""

sns.barplot(x=dataset["sex"], y=y, data=dataset)

"""We notice, that females are more likely to have heart problems than males

Analysing the 'Chest Pain Type' feature
"""

dataset["cp"].unique()

"""As expected, the CP feature has values from 0 to 3"""

# Use the 'x' and 'y' arguments to specify the data for the respective axes.
sns.barplot(x=dataset["cp"], y=y)

"""We notice, that chest pain of '0', i.e. the ones with typical angina are much less likely to have heart problems

Analysing the FBS feature
"""

dataset["fbs"].describe()

dataset["fbs"].unique()

sns.barplot(x="fbs", y=y, data=dataset) # Pass the entire DataFrame to the data parameter and specify the 'fbs' column for the x-axis.

"""Nothing extraordinary here

Analysing the restecg feature
"""

dataset["restecg"].unique()

sns.barplot(x=dataset["restecg"], y=y) # Use named arguments x and y to specify the axes

"""We realize that people with restecg '1' and '0' are much more likely to have a heart disease than with restecg '2'

Analysing the 'exang' feature
"""

dataset["exang"].unique()

sns.barplot(x="exang", y=y, data=dataset) # Use named arguments for x and y and pass the entire dataset to data.

"""People with exang=1 i.e. Exercise induced angina are much less likely to have heart problems

Analysing the Slope feature
"""

dataset["slope"].unique()

sns.barplot (x="slope", y=y, data=dataset)

"""We observe, that Slope '2' causes heart pain much more than Slope '0' and '1'

Analysing the 'ca' feature
"""

#number of major vessels (0-3) colored by flourosopy

dataset["ca"].unique()

sns.countplot(dataset["ca"])

sns.barplot(x="ca",y=y, data=dataset)

"""ca=4 has astonishingly large number of heart patients"""

### Analysing the 'thal' feature

dataset["thal"].unique()

sns.barplot(x="thal",y=y, data=dataset)

!pip install pandas

import pandas as pd

# Convert 'thal' column to numeric type, handling non-numeric values
dataset["thal"] = pd.to_numeric(dataset["thal"], errors='coerce')

sns.distplot(dataset["thal"])

"""Train Test split"""

from sklearn.model_selection import train_test_split

predictors = dataset.drop("num",axis=1)
num = dataset["num"]

X_train,X_test,Y_train,Y_test = train_test_split(predictors,num,test_size=0.20,random_state=0)

X_train.shape

X_test.shape

Y_train.shape

Y_test.shape

"""Model Fitting"""

from sklearn.metrics import accuracy_score

"""Logistic Regression"""

import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import OneHotEncoder

# Create an imputer to replace missing values with the most frequent value of each column
imputer = SimpleImputer(strategy='most_frequent')

# Fit the imputer on the training data and transform both training and testing data
X_train = imputer.fit_transform(X_train)
X_test = imputer.transform(X_test)

# Create a OneHotEncoder object to handle non-numeric data
encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)  # 'ignore' avoids errors with unseen values in test data

# Fit the encoder on the training data and transform both training and testing data
X_train = encoder.fit_transform(X_train)
X_test = encoder.transform(X_test)

lr = LogisticRegression()
lr.fit(X_train,Y_train)
Y_pred_lr = lr.predict(X_test)

Y_pred_lr.shape

score_lr = round(accuracy_score(Y_pred_lr,Y_test)*100,2)

print("The accuracy score achieved using Logistic Regression is: "+str(score_lr)+" %")

"""Naive Bayes"""

from sklearn.naive_bayes import GaussianNB

nb = GaussianNB()

nb.fit(X_train,Y_train)

Y_pred_nb = nb.predict(X_test)

Y_pred_nb.shape

score_nb = round(accuracy_score(Y_pred_nb,Y_test)*100,2)

print("The accuracy score achieved using Naive Bayes is: "+str(score_nb)+" %")

"""SVM"""

from sklearn import svm

sv = svm.SVC(kernel='linear')

sv.fit(X_train, Y_train)

Y_pred_svm = sv.predict(X_test)

Y_pred_svm.shape

score_svm = round(accuracy_score(Y_pred_svm,Y_test)*100,2)

print("The accuracy score achieved using Linear SVM is: "+str(score_svm)+" %")

"""K Nearest Neighbors"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=7)
knn.fit(X_train,Y_train)
Y_pred_knn=knn.predict(X_test)

Y_pred_knn.shape

score_knn = round(accuracy_score(Y_pred_knn,Y_test)*100,2)

print("The accuracy score achieved using KNN is: "+str(score_knn)+" %")

"""Decision Tree"""

from sklearn.tree import DecisionTreeClassifier

max_accuracy = 0


for x in range(200):
    dt = DecisionTreeClassifier(random_state=x)
    dt.fit(X_train,Y_train)
    Y_pred_dt = dt.predict(X_test)
    current_accuracy = round(accuracy_score(Y_pred_dt,Y_test)*100,2)
    if(current_accuracy>max_accuracy):
        max_accuracy = current_accuracy
        best_x = x

#print(max_accuracy)
#print(best_x)


dt = DecisionTreeClassifier(random_state=best_x)
dt.fit(X_train,Y_train)
Y_pred_dt = dt.predict(X_test)

print(Y_pred_dt.shape)

score_dt = round(accuracy_score(Y_pred_dt,Y_test)*100,2)

print("The accuracy score achieved using Decision Tree is: "+str(score_dt)+" %")

"""Random Forest"""

from sklearn.ensemble import RandomForestClassifier

max_accuracy = 0


for x in range(2000):
    rf = RandomForestClassifier(random_state=x)
    rf.fit(X_train,Y_train)
    Y_pred_rf = rf.predict(X_test)
    current_accuracy = round(accuracy_score(Y_pred_rf,Y_test)*100,2)
    if(current_accuracy>max_accuracy):
        max_accuracy = current_accuracy
        best_x = x

#print(max_accuracy)
#print(best_x)

rf = RandomForestClassifier(random_state=best_x)
rf.fit(X_train,Y_train)
Y_pred_rf = rf.predict(X_test)

Y_pred_rf.shape

score_rf = round(accuracy_score(Y_pred_rf,Y_test)*100,2)

print("The accuracy score achieved using Decision Tree is: "+str(score_rf)+" %")

"""XGBoost"""

import xgboost as xgb

xgb_model = xgb.XGBClassifier(objective="binary:logistic", random_state=42)
xgb_model.fit(X_train, Y_train)

Y_pred_xgb = xgb_model.predict(X_test)

import xgboost as xgb # make sure you have xgboost installed. If not, use !pip install xgboost

xgb_model = xgb.XGBClassifier(objective="binary:logistic", random_state=42)
xgb_model.fit(X_train, Y_train)

Y_pred_xgb = xgb_model.predict(X_test) # This line defines Y_pred_xgb

Y_pred_xgb.shape

score_xgb = round(accuracy_score(Y_pred_xgb,Y_test)*100,2)

print("The accuracy score achieved using XGBoost is: "+str(score_xgb)+" %")

"""Neural Network"""

from keras.models import Sequential
from keras.layers import Dense

# https://stats.stackexchange.com/a/136542 helped a lot in avoiding overfitting

model = Sequential()
model.add(Dense(11,activation='relu',input_dim=13))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

model.fit(X_train,Y_train,epochs=300)

print(X_train.shape)  # Check the shape of your training data

model = Sequential()
model.add(Dense(11,activation='relu',input_dim=1229)) # Change input_dim to 1229
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

Y_pred_nn = model.predict(X_test)

Y_pred_nn.shape

rounded = [round(x[0]) for x in Y_pred_nn]

Y_pred_nn = rounded

score_nn = round(accuracy_score(Y_pred_nn,Y_test)*100,2)

print("The accuracy score achieved using Neural Network is: "+str(score_nn)+" %")

#Note: Accuracy of 85% can be achieved on the test set, by setting epochs=2000, and number of nodes = 11.

"""Output final score"""

scores = [score_lr,score_nb,score_svm,score_knn,score_dt,score_rf,score_xgb,score_nn]
algorithms = ["Logistic Regression","Naive Bayes","Support Vector Machine","K-Nearest Neighbors","Decision Tree","Random Forest","XGBoost","Neural Network"]

for i in range(len(algorithms)):
    print("The accuracy score achieved using "+algorithms[i]+" is: "+str(scores[i])+" %")

!pip install seaborn
import seaborn as sns
import matplotlib.pyplot as plt

sns.set(rc={'figure.figsize':(15,8)})
plt.xlabel("Algorithms")
plt.ylabel("Accuracy score")

sns.barplot(x=algorithms,y=scores) # Changed the arguments to named arguments.

